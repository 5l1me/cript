from fractions import Fraction


def extended_euclidean_algorithm(a, b):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ –∏–∑ —Ç—Ä—ë—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (gcd, x, y), —Ç–∞–∫–æ–π, —á—Ç–æ
    a * x + b * y == gcd, –≥–¥–µ gcd - –Ω–∞–∏–±–æ–ª—å—à–∏–π
    –æ–±—â–∏–π –¥–µ–ª–∏—Ç–µ–ª—å a –∏ b.

    –í —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
    –ï–≤–∫–ª–∏–¥–∞ –∏ –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ –æ–Ω–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è O(log b).
    """
    s, old_s = 0, 1
    t, old_t = 1, 0
    r, old_r = b, a

    while r != 0:
        quotient = old_r // r
        old_r, r = r, old_r - quotient * r
        old_s, s = s, old_s - quotient * s
        old_t, t = t, old_t - quotient * t

    return old_r, old_s, old_t


def p2(x, y, p, a, z=None):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ P,
    –∑–Ω–∞—á–µ–Ω–∏—è p, a
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã 2P
    """
    if z is not None:
        print(f'—Å—á–∏—Ç–∞–µ–º {z}')
        print(f'p2({x=}, {y=}, {p=}, {a=})')
    if 3 * x ** 2 + a % 2 * y != 0:
        f = Fraction(3 * x ** 2 + a, 2 * y)  # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–π –¥—Ä–æ–±–∏ –ø–æ –º–æ–¥—É–ª—é
        gcd, xe, ye = extended_euclidean_algorithm(f.denominator, p)  # —Å –ø–æ–º–æ—â—å—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ï–≤–∫–ª–∏–¥–∞
        lamb = f.numerator * xe % p
        if z is not None:
            print(f'lamb={f.numerator}*{xe}mod{p}={lamb}')
    else:
        lamb = (3 * x ** 2 + a) // (2 * y) % p
        if z is not None:
            print(f'lamb={3 * x ** 2 + a}/{2 * y}mod{p}={lamb}')
    x3 = (lamb ** 2 - 2 * x) % p  # –Ω–∞—Ö–æ–¥–∏–º x3
    if z is not None:
        print(f'x3={lamb ** 2 - 2 * x}mod{p}={x3}')
    y3 = (-y + lamb * (x - x3)) % p  # –Ω–∞—Ö–æ–¥–∏–º y3
    if z is not None:
        print(f'y3={-y + lamb * (x - x3)}mod{p}={y3}')
        print(f'–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫—Ä–∏–≤–æ–π\n{y3 ** 2}mod{p}==({x3 ** 3}+{a * x3}+1)mod{p}')
        print(f'{y3 ** 2 % p}=={(x3 ** 3 + a * x3 + 1) % p}\n')
    assert y3 ** 2 % p == (x3 ** 3 + a * x3 + 1) % p  # –≤—ã–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ —Ç–æ—á–∫–∞ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫—Ä–∏–≤–æ–π
    return x3, y3


def p_add_q(x1, y1, x2, y2, p, a, z=None):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ P –∏ Q,
    –∑–Ω–∞—á–µ–Ω–∏—è p, a
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã P+Q
    """
    if z is not None:
        print(f'—Å—á–∏—Ç–∞–µ–º {z}')
        print(f'p_add_q({x1=}, {y1=}, {x2=}, {y2=}, {p=}, {a=})')
    if (x1, y1) == (x2, y2):
        return p2(x1, y1, p, a, z)
    if x1 == x2:
        if z is not None:
            print(f'x1 == x2 -> {z}=ùëÇ')
        return None
    if (y2 - y1) % (x2 - x1) != 0:
        f = Fraction((y2 - y1), (x2 - x1))  # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–π –¥—Ä–æ–±–∏ –ø–æ –º–æ–¥—É–ª—é
        gcd, xe, ye = extended_euclidean_algorithm(f.denominator, p)  # —Å –ø–æ–º–æ—â—å—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ï–≤–∫–ª–∏–¥–∞
        lamb = f.numerator * xe % p
        if z is not None:
            print(f'lamb={f.numerator}*{xe}mod{p}={lamb}')
    else:
        lamb = (y2 - y1) // (x2 - x1) % p
        if z is not None:
            print(f'lamb={y2 - y1}/{x2 - x1}mod{p}={lamb}')
    x3 = (lamb ** 2 - x1 - x2) % p  # –Ω–∞—Ö–æ–¥–∏–º x3
    if z is not None:
        print(f'x3={lamb ** 2 - x1 - x2}mod{p}={x3}')
    y3 = (-y1 + lamb * (x1 - x3)) % p  # –Ω–∞—Ö–æ–¥–∏–º y3
    if z is not None:
        print(f'y3={-y1 + lamb * (x1 - x3)}mod{p}={y3}')
        print(f'–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫—Ä–∏–≤–æ–π\n{y3 ** 2}mod{p}==({x3 ** 3}+{a * x3}+1)mod{p}')
        print(f'{y3 ** 2 % p}=={(x3 ** 3 + a * x3 + 1) % p}\n')
    assert y3 ** 2 % p == (x3 ** 3 + a * x3 + 1) % p  # –≤—ã–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ —Ç–æ—á–∫–∞ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫—Ä–∏–≤–æ–π
    return x3, y3


def negR(x, y, p, z=None):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ R,
    –∑–Ω–∞—á–µ–Ω–∏—è p, a
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã -R
    """
    if z is not None:
        print(f'—Å—á–∏—Ç–∞–µ–º {z}')
        print(f'{x=} y={-y}mod{p}={-y % p}\n')
    return x, -y % p


def nS(n, xS, yS, p, a, z=None):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç n, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã S,
    –∑–Ω–∞—á–µ–Ω–∏—è p, a
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã nS
    """
    if z is not None:
        print(f'—Å—á–∏—Ç–∞–µ–º {n}{z}')
    now = (xS, yS)
    decay = bin(n)[2:]  # –Ω–∞—Ö–æ–¥–∏–º —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ —á–∏—Å–ª–∞ n —Å –ø–æ–º–æ—â—å—é –¥–≤–æ–∏—á–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    z_desc = z  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º—É–ª—É —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–µ
    for i in range(1, len(decay)):
        if decay[i] == '1':
            z_desc = f'{z}+2({z_desc})'
            now = p_add_q(xS, yS, *p2(*now, p, a, z=z_desc[2:] if z else None), p, a, z=z_desc if z else None)
        else:
            z_desc = f'2({z_desc})'
            now = p2(*now, p, a, z=z_desc if z else None)
    if z is not None:
        print(f'{n}{z} = {z_desc} = {now}')
    return now
